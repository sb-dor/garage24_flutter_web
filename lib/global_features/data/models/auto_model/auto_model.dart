import 'package:moshin_flutter_web/global_features/data/models/auto_model/related_models/mark_model.dart';
import 'package:moshin_flutter_web/global_features/data/models/auto_model/related_models/model_m.dart';
import 'package:moshin_flutter_web/global_features/domain/entities/auto/auto.dart';
import 'related_models/generation_model.dart';

class AutoModel extends Auto {
  AutoModel({
    int? id,
    MarkModel? markModel,
    ModelM? autoModelModel,
    GenerationModel? generationModel,
    bool? panoramicView,
    bool? exchange,
    bool? custom,
    bool? state,
    int? modification,
    bool? leatherInterior,
    double? engineVolume,
    int? qtySeats,
    int? mileage,
    int? price,
    String? mileageType,
    String? description,
    String? exchangeDescription,
    int? year,
    int? views,
    int? phoneViews,
    bool? inGarage,
    String? deletionRequest,
    String? checkedAt,
    String? nextRefreshDate,
    String? createdAt,
    String? publishedAt,
    int? similarAds,
    int? marketPrice,
    int? minPrice,
    int? maxPrice,
    double? priceScale,
    bool checkedFavorite = false,
    bool checkedComparison = false,
    bool showPhoneNumber = false,
  }) : super(
          id: id,
          markEntity: markModel,
          autoModelEntity: autoModelModel,
          generationEntity: generationModel,
          panoramicView: panoramicView,
          exchange: exchange,
          custom: custom,
          state: state,
          modification: modification,
          leatherInterior: leatherInterior,
          engineVolume: engineVolume,
          qtySeats: qtySeats,
          mileage: mileage,
          price: price,
          mileageType: mileageType,
          description: description,
          exchangeDescription: exchangeDescription,
          year: year,
          views: views,
          phoneViews: phoneViews,
          inGarage: inGarage,
          deletionRequest: deletionRequest,
          checkedAt: checkedAt,
          nextRefreshDate: nextRefreshDate,
          createdAt: createdAt,
          publishedAt: publishedAt,
          similarAds: similarAds,
          marketPrice: marketPrice,
          minPrice: minPrice,
          maxPrice: maxPrice,
          priceScale: priceScale,
          checkedFavorite: checkedFavorite,
          checkedComparison: checkedComparison,
          showPhoneNumber: showPhoneNumber,
        );

  factory AutoModel.fromJson(Map<String, dynamic> json) {
    return AutoModel(
      id: json['id'],
      markModel: json['mark'] == null ? null : MarkModel.fromJson(json['mark']),
      autoModelModel: json['model'] == null ? null : ModelM.fromJson(json['model']),
      generationModel:
          json['generation'] == null ? null : GenerationModel.fromJson(json['generation']),
      panoramicView: json['panoramic_view'] == 1 ? true : false,
      exchange: json['exchange'] == 1 ? true : false,
      custom: json['custom'] == 1 ? true : false,
      state: json['state'] == 1 ? true : false,
      modification: json['modification'],
      leatherInterior: json['leather_interior'] == 1 ? true : false,
      engineVolume: json['engine_volume'] == null ? 0.0 : json['engine_volume'].toDouble(),
      qtySeats: json['quantity_seats'],
      mileage: json['mileage'],
      price: json['price'],
      mileageType: json['mileage_type'],
      description: json['description'],
      exchangeDescription: json['exchange_description'],
      year: json['year'],
      views: json['views'],
      phoneViews: json['phone_views'],
      inGarage: json['in_garage'] == 1 ? true : false,
      deletionRequest: json['deletion_request'],
      checkedAt: json['checked_at'],
      publishedAt: json['published_at'],
      similarAds: json['similar_ads'],
      marketPrice: json['market_price'],
      minPrice: json['min_price'],
      maxPrice: json['max_price'],
      priceScale: json['price_scale'] != null ? json['price_scale'].toDouble() : 0.0,
      nextRefreshDate: json['next_refresh_date'],
      createdAt: json['created_at'],
      checkedFavorite: json['favorite'] != null ? true : false,
      checkedComparison: json['comparison'] ?? false,
    );
  }

  static AutoModel? fromEntity(Auto? autoEntity) {
    if (autoEntity == null) return null;
    return AutoModel(
      id: autoEntity.id,
      markModel: MarkModel.fromEntity(autoEntity.markEntity),
      generationModel: GenerationModel.fromEntity(autoEntity.generationEntity),
      autoModelModel: ModelM.fromEntity(autoEntity.autoModelEntity),
      panoramicView: autoEntity.panoramicView,
      exchange: autoEntity.exchange,
      custom: autoEntity.custom,
      state: autoEntity.state,
      modification: autoEntity.modification,
      leatherInterior: autoEntity.leatherInterior,
      engineVolume: autoEntity.engineVolume,
      qtySeats: autoEntity.qtySeats,
      mileage: autoEntity.mileage,
      price: autoEntity.price,
      mileageType: autoEntity.mileageType,
      description: autoEntity.description,
      exchangeDescription: autoEntity.exchangeDescription,
      year: autoEntity.year,
      views: autoEntity.views,
      phoneViews: autoEntity.phoneViews,
      inGarage: autoEntity.inGarage,
      deletionRequest: autoEntity.deletionRequest,
      checkedAt: autoEntity.checkedAt,
      nextRefreshDate: autoEntity.nextRefreshDate,
      createdAt: autoEntity.createdAt,
      publishedAt: autoEntity.publishedAt,
      similarAds: autoEntity.similarAds,
      marketPrice: autoEntity.marketPrice,
      minPrice: autoEntity.minPrice,
      maxPrice: autoEntity.maxPrice,
      priceScale: autoEntity.priceScale,
      checkedFavorite: autoEntity.checkedFavorite,
      checkedComparison: autoEntity.checkedComparison,
      showPhoneNumber: autoEntity.showPhoneNumber,
    );
  }
}
